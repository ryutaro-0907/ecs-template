name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install Python dependencies using Poetry
        working-directory: ./backend
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Test Python Application
        working-directory: ./backend
        run: |
          poetry run pytest backend/tests/

      - name: Build and Push Backend Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_REGISTRY }}
          ECR_REPOSITORY: my-python-app
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA -f backend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: |
          npm install

      - name: Test Next.js Application
        working-directory: ./frontend
        run: |
          npm test

      - name: Build and Push Frontend Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_REGISTRY }}
          ECR_REPOSITORY: my-nextjs-app
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA -f frontend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
